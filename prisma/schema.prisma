// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  subscriptions Subscription[]
  votes         Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

enum RegionType {
  CITY
  ZIP
  ADDRESS
  COUNTY
  STATE
  COUNTRY
  USER
}

model Subscription {
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  region      String
  radius      Int?
  radiusUnits String?
  regionType  RegionType

  @@id([userId])
}

model Post {
  id            String                                 @id @default(cuid())
  title         String
  address       String
  streetAddress String
  postalCode    String
  city          String
  county        String
  country       String
  location      Unsupported("geography(Point, 4326)")?
  listingUrl    String?
  content       Json?
  createdAt     DateTime                               @default(now())
  updatedAt     DateTime                               @updatedAt @default(now())
  author        User                                   @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  votes         Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  updatedAt DateTime @updatedAt

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
